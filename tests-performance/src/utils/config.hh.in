#ifndef LIBMATA_PERFTEST_CONFIG_H
#define LIBMATA_PERFTEST_CONFIG_H

#include <string>

namespace Mata::PerformanceTesting {
    const std::string AUTOMATA_DIR = "@CMAKE_CURRENT_SOURCE_DIR@/automata";
    const std::string BENCHMARK_DIR = "@CMAKE_CURRENT_SOURCE_DIR@/benchmark";
}

/*
 * Use to print elapsed time of set of timers with user-defined prefix `timer`
 */
#define TIME_PRINT(timer) std::cout << #timer ": " << timer##_elapsed.count() << "\n"

/*
 * Use to create initial timer with user-defined prefxi `timer`
 */
#define TIME_BEGIN(timer) auto timer##_start = std::chrono::system_clock::now()

/*
 * Use to create final timer with user-defined prefxi `timer`
 * and print time elapsed between initial and final timers.
 */
#define TIME_END(timer) do { \
        auto timer##_end = std::chrono::system_clock::now(); \
        std::chrono::duration<double> timer##_elapsed = timer##_end - timer##_start; \
        TIME_PRINT(timer); \
    } while(0)

/*
 * Use to profile single statement.
 *
 * Warning: `,` might cause trouble. Use `TIME_BLOCK` instead then.
 *
 * ```c
 *    TIME_STATEMENT(lhs.size() == rhs.size());
 * ```
 */
#define TIME_STATEMENT(timer, stmt) do { \
        TIME_BEGIN(timer); \
        stmt; \
        TIME_END(timer); \
    } while(0)

/*
 * Use to profile multiple statements in block.
 *
 * Warning: this might fail for some blocks. Use pair of `TIME_BEGIN()` and `TIME_END()` instead then.
 *
 * ```c
 *    TIME_BLOCK(
 *        result = intersection(lhs, rhs);
 *        complement(result)
 *    );
 * ```
 */
#define TIME_BLOCK(timer, ...) do { \
        TIME_BEGIN(timer); \
        __VA_ARGS__ \
        TIME_END(timer); \
    } while(0)

#endif //LIBMATA_PERFTEST_CONFIG_H
